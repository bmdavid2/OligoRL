return(list[[element_index]])
}
genome_accession=accession_number
genome=import_genome(genome_accession)
ncRNA=genome@other_features
rRNA=ncRNA[ncRNA$type=="rRNA"]
tRNA=ncRNA[ncRNA$type=="tRNA"]
rRNA_transcripts=c()
tRNA_transcripts=c()
if (length(rRNA)>0){
for(j in 1:length(rRNA)){
rRNA_transcripts[j]=transcript_sequence_finder(genome,rRNA[j])
}
}
if (length(tRNA)>0){
for(k in 1:length(tRNA)){
tRNA_transcripts[k]=transcript_sequence_finder(genome,tRNA[k])
}
}
rRNA_transcripts=unique(rRNA_transcripts)
tRNA_transcripts=unique(tRNA_transcripts)
bad_guys=c(rRNA_transcripts,tRNA_transcripts)
output1=data.frame(Sequence=bad_guys)
df_0=initial_df(genome = genome,sample = FALSE)
output2=df_0
output=list(output1,output2)
return(output)
}
save_single_chromosome=function(genome_accession,species_name){
x=lapply(genome_accession,new_df_0_creation) #Output list where each element in the list is a list itself. Element 1 in this list is the rRNA/tRNA seqs and element 2 is the mRNA seqs.
suffix_gene="_Genes.csv"
suffix_rRNA_tRNA="_rRNA_tRNA.csv"
genefile=paste(species_name,suffix_gene,sep="")
rRNA_tRNAfile=paste(species_name,suffix_rRNA_tRNA,sep="")
write.csv(x[[1]][[1]],rRNA_tRNAfile)
write.csv(x[[1]][[2]],genefile)
}
# get command line options, if help option encountered print help and exit,
# otherwise if options not found on command line then set defaults,
#########################
retrieve_genome=function(species_name,genome_accession){
x=lapply(genome_accession,new_df_0_creation) #Output list where each element in the list is a list itself. Element 1 in this list is the rRNA/tRNA seqs and element 2 is the mRNA seqs.
suffix_gene="_Genes.csv"
suffix_rRNA_tRNA="_rRNA_tRNA.csv"
genefile=paste(species_name,suffix_gene,sep="")
rRNA_tRNAfile=paste(species_name,suffix_rRNA_tRNA,sep="")
genedata=data.frame()
rRNA_tRNAdata=data.frame()
for (i in 1:length(genome_accession)){
genedata =rbind(genedata,x[[i]][[2]])
rRNA_tRNAdata=rbind(rRNA_tRNAdata,x[[i]][[1]])
}
write.csv(rRNA_tRNAdata,rRNA_tRNAfile)
write.csv(genedata,genefile)
}
library(rsm)
figcolors <- read.csv("colors.csv",sep=",")
Red="#d7191c"
Orange="#fdae61"
Yellow="#ffffbf"
LightBlue="#abd9e9"
Blue="#2c7bb6"
# 2 Factor CCD Data
design_12_4_20 <- read.csv("12-4-20 Raw Data.csv")[,c(1:5,8)]
design_12_4_20$Probe_16s_Coded <- round(design_12_4_20$Probe_16s_Coded,0)
design_12_4_20$Probe_23s_Coded <- round(design_12_4_20$Probe_23s_Coded,0)
knitr::kable(design_12_4_20,"latex")
# 3 Factor CCD  Data and analysis
rRNA_dep <- ccd(Depletion~Probe+RNA+Bead,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(Probe~(probes-500)/(300/1.682),
RNA~(totalRNA-250)/(150/1.682),
Bead~(beads-100)/(50/1.682)))
rRNA_dep$Probe_Coded <- round(rRNA_dep$Probe,0)
rRNA_dep$RNA_Coded <- round(rRNA_dep$RNA,0)
rRNA_dep$Bead_Coded <- round(rRNA_dep$Bead,0)
rRNA_dep$Probe_Mass <- round(rRNA_dep$Probe*(300/1.682)+500,0)
rRNA_dep$RNA_Mass <- round(rRNA_dep$RNA*(150/1.682)+250,0)
rRNA_dep$Bead_Mass <- round(rRNA_dep$Bead*(50/1.682)+100,0)
rRNA_dep$Abundance <- c(69.17,1356.98,24.43,559.69,23.36,646.81,10.00,114.19,115.38,183.34,176.01,4.31,903.89,472.40,53.23,523.93,169.35)
rRNA_dep$Depletion <- 100-rRNA_dep$Abundance
rRNA_dep$run=c(1:nrow(rRNA_dep))
round(rRNA)
SOrRNA_dep <- rsm(Depletion ~ SO(Probe,RNA,Bead),data=rRNA_dep)
summary(SOrRNA_dep)
4**2
4^2
library(rsm)
figcolors <- read.csv("colors.csv",sep=",")
Red="#d7191c"
Orange="#fdae61"
Yellow="#ffffbf"
LightBlue="#abd9e9"
Blue="#2c7bb6"
# 2 Factor CCD Data
design_12_4_20 <- read.csv("12-4-20 Raw Data.csv")[,c(1:5,8)]
design_12_4_20$Probe_16s_Coded <- round(design_12_4_20$Probe_16s_Coded,0)
design_12_4_20$Probe_23s_Coded <- round(design_12_4_20$Probe_23s_Coded,0)
knitr::kable(design_12_4_20,"latex")
# 3 Factor CCD  Data and analysis
rRNA_dep <- ccd(Depletion~Probe+RNA+Bead,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(Probe~(probes-500)/(300/1.682),
RNA~(totalRNA-250)/(150/1.682),
Bead~(beads-100)/(50/1.682)))
rRNA_dep$Probe_Coded <- round(rRNA_dep$Probe,0)
rRNA_dep$RNA_Coded <- round(rRNA_dep$RNA,0)
rRNA_dep$Bead_Coded <- round(rRNA_dep$Bead,0)
rRNA_dep$Probe_Mass <- round(rRNA_dep$Probe*(300/1.682)+500,0)
rRNA_dep$RNA_Mass <- round(rRNA_dep$RNA*(150/1.682)+250,0)
rRNA_dep$Bead_Mass <- round(rRNA_dep$Bead*(50/1.682)+100,0)
rRNA_dep$Abundance <- c(69.17,1356.98,24.43,559.69,23.36,646.81,10.00,114.19,115.38,183.34,176.01,4.31,903.89,472.40,53.23,523.93,169.35)
rRNA_dep$Depletion <- 100-rRNA_dep$Abundance
rRNA_dep$run=c(1:nrow(rRNA_dep))
round(rRNA)
SOrRNA_dep <- rsm(Depletion ~ SO(Probe,RNA,Bead),data=rRNA_dep)
summary(SOrRNA_dep)
#Residual Standard Error
k=length(SOrRNA_dep$coefficients)-1
SSE=sum(SOrRNA_dep$residuals^2)
n=length(SOrRNA_dep$residuals)
RSE=sqrt(SSE/(n-(1+k)))
RSE
library(ggplot2)
library(dplyr)
results_sites <- read.csv("./rollout_results_sites.csv")
results_length <- read.csv("./rollout_results_length.csv")
interaction_data <- read.csv("./Cutfree_interaction_data.csv")
plot_cutfree_data <- function(results_sites,results_length) {
font_size=8
font="Arial"
line_size=.4
point_size=0.6
red="#d73027"
blue="#4575b4"
plot1 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(0.01,0.1,1,10,100),labels=c("0.01","0.1","1","10","100")) +
ggplot2::geom_point(aes(x=n_sites,y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_runtime),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Runtime (s)") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot2 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(1e9,1e10,1e11),labels=c(expression(paste("10"^"9")),expression(paste("10"^"10")),expression(paste("10"^"11")))) +
ggplot2::geom_point(aes(x=n_sites,y=degeneracy),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_objval),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Possible Sequences") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=degeneracy),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_objval),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot0 <- ggplot2::ggplot(data=results_length) +
ggplot2::scale_y_log10(breaks=c(0.1,1,10,100),labels=c("0.1","1","10","100")) +
ggplot2::geom_point(aes(x=oligo_lengths, y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=oligo_lengths, y=random_runtime),color=red,size=point_size) +
ggplot2::xlab("Randomer Length (bp)") +
ggplot2::ylab("Runtime (s)") +
ggplot2::geom_smooth(aes(x=oligo_lengths,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=oligo_lengths,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
#results %>%
#dplyr::group_by(n_sites) %>%
#dplyr::select(n_sites, time, degeneracy) %>%
#dplyr::summarise_all(dplyr::funs(mean, sd))
cowplot::plot_grid(plot1, plot0,plot2,NULL,rel_widths = c(1,1,1,0.75), align= "h", nrow=1 )
scaling_factor=5.5
ggsave("./Figure1.eps",width=scaling_factor,height=scaling_factor/3.75,dpi=300,units="in")
}
plot_cutfree_data(results_sites,results_length)
setwd("~/Documents/GitHub/OligoRL/Figures/Figure1")
library(ggplot2)
library(dplyr)
results_sites <- read.csv("./rollout_results_sites.csv")
results_length <- read.csv("./rollout_results_length.csv")
interaction_data <- read.csv("./Cutfree_interaction_data.csv")
plot_cutfree_data <- function(results_sites,results_length) {
font_size=8
font="Arial"
line_size=.4
point_size=0.6
red="#d73027"
blue="#4575b4"
plot1 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(0.01,0.1,1,10,100),labels=c("0.01","0.1","1","10","100")) +
ggplot2::geom_point(aes(x=n_sites,y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_runtime),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Runtime (s)") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot2 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(1e9,1e10,1e11),labels=c(expression(paste("10"^"9")),expression(paste("10"^"10")),expression(paste("10"^"11")))) +
ggplot2::geom_point(aes(x=n_sites,y=degeneracy),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_objval),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Possible Sequences") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=degeneracy),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_objval),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot0 <- ggplot2::ggplot(data=results_length) +
ggplot2::scale_y_log10(breaks=c(0.1,1,10,100),labels=c("0.1","1","10","100")) +
ggplot2::geom_point(aes(x=oligo_lengths, y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=oligo_lengths, y=random_runtime),color=red,size=point_size) +
ggplot2::xlab("Randomer Length (bp)") +
ggplot2::ylab("Runtime (s)") +
ggplot2::geom_smooth(aes(x=oligo_lengths,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=oligo_lengths,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
#results %>%
#dplyr::group_by(n_sites) %>%
#dplyr::select(n_sites, time, degeneracy) %>%
#dplyr::summarise_all(dplyr::funs(mean, sd))
cowplot::plot_grid(plot1, plot0,plot2,NULL,rel_widths = c(1,1,1,0.75), align= "h", nrow=1 )
scaling_factor=5.5
ggsave("./Figure1.eps",width=scaling_factor,height=scaling_factor/3.75,dpi=300,units="in")
}
plot_cutfree_data(results_sites,results_length)
View(results_length)
View(results_length)
results_sites <- read.csv("./rollout_results_sites.csv")
results_length <- read.csv("./rollout_results_length.csv")
interaction_data <- read.csv("./Cutfree_interaction_data.csv")
setwd("~/Documents/GitHub/OligoRL/CutFreeRL/Plotting")
library(ggplot2)
library(dplyr)
results_sites <- read.csv("./rollout_results_sites_4_1_21.csv")
results_length <- read.csv("./rollout_results_length_4_15_21.csv")
interaction_data <- read.csv("./Cutfree_interaction_data.csv")
#results_sites <- results_sites[order(results_sites$n_sites), ]
#resutls_sites <- results_sites[results_sites$n_sites<=10]
#results_sites <- results_sites[1:80,]
plot_cutfree_data <- function() {
font_size=8
font="Arial"
line_size=.4
point_size=0.6
red="#d73027"
blue="#4575b4"
results_sites <- read.csv("./rollout_results_sites_4_1_21.csv")
results_length <- read.csv("./rollout_results_length_4_15_21.csv")
interaction_data <- read.csv("./Cutfree_interaction_data.csv")
plot1 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(0.01,0.1,1,10,100),labels=c("0.01","0.1","1","10","100")) +
ggplot2::geom_point(aes(x=n_sites,y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_runtime),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Runtime (s)") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot2 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(1e9,1e10,1e11),labels=c(expression(paste("10"^"9")),expression(paste("10"^"10")),expression(paste("10"^"11")))) +
ggplot2::geom_point(aes(x=n_sites,y=degeneracy),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_objval),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Possible Sequences") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=degeneracy),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_objval),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot0 <- ggplot2::ggplot(data=results_length) +
ggplot2::scale_y_log10(breaks=c(0.1,1,10,100),labels=c("0.1","1","10","100")) +
ggplot2::geom_point(aes(x=oligo_lengths, y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=oligo_lengths, y=random_runtime),color=red,size=point_size) +
ggplot2::xlab("Randomer Length (bp)") +
ggplot2::ylab("Runtime (s)") +
ggplot2::geom_smooth(aes(x=oligo_lengths,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=oligo_lengths,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
#results %>%
#dplyr::group_by(n_sites) %>%
#dplyr::select(n_sites, time, degeneracy) %>%
#dplyr::summarise_all(dplyr::funs(mean, sd))
cowplot::plot_grid(plot1, plot0,plot2,NULL,rel_widths = c(1,1,1,0.75), align= "h", nrow=1 )
scaling_factor=5.5
ggsave("Figure1.eps",width=scaling_factor,height=scaling_factor/3.75,dpi=300,units="in")
}
plot_cutfree_data()
setwd("~/Documents/GitHub/OligoRL/CutFreeRL/Plotting")
library(ggplot2)
library(dplyr)
results_sites <- read.csv("./rollout_results_sites_4_1_21.csv")
results_length <- read.csv("./rollout_results_length_4_15_21.csv")
interaction_data <- read.csv("./Cutfree_interaction_data.csv")
#results_sites <- results_sites[order(results_sites$n_sites), ]
#resutls_sites <- results_sites[results_sites$n_sites<=10]
#results_sites <- results_sites[1:80,]
plot_cutfree_data <- function() {
font_size=8
font="Arial"
line_size=.4
point_size=0.6
red="#d73027"
blue="#4575b4"
results_sites <- read.csv("./rollout_results_sites_4_1_21.csv")
results_length <- read.csv("./rollout_results_length_4_15_21.csv")
interaction_data <- read.csv("./Cutfree_interaction_data.csv")
plot1 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(0.01,0.1,1,10,100),labels=c("0.01","0.1","1","10","100")) +
ggplot2::geom_point(aes(x=n_sites,y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_runtime),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Runtime (s)") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot2 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(1e9,1e10,1e11),labels=c(expression(paste("10"^"9")),expression(paste("10"^"10")),expression(paste("10"^"11")))) +
ggplot2::geom_point(aes(x=n_sites,y=degeneracy),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_objval),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Possible Sequences") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=degeneracy),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_objval),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot0 <- ggplot2::ggplot(data=results_length) +
ggplot2::scale_y_log10(breaks=c(0.1,1,10,100),labels=c("0.1","1","10","100")) +
ggplot2::geom_point(aes(x=oligo_lengths, y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=oligo_lengths, y=random_runtime),color=red,size=point_size) +
ggplot2::xlab("Randomer Length (bp)") +
ggplot2::ylab("Runtime (s)") +
ggplot2::geom_smooth(aes(x=oligo_lengths,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=oligo_lengths,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
#results %>%
#dplyr::group_by(n_sites) %>%
#dplyr::select(n_sites, time, degeneracy) %>%
#dplyr::summarise_all(dplyr::funs(mean, sd))
cowplot::plot_grid(plot1, plot0,plot2,NULL,rel_widths = c(1,1,1,1), align= "h", nrow=2 )
scaling_factor=5.5
ggsave("Figure1.eps",width=scaling_factor,height=scaling_factor/3.75,dpi=300,units="in")
}
plot_cutfree_data()
setwd("~/Documents/GitHub/OligoRL/CutFreeRL/Plotting")
library(ggplot2)
library(dplyr)
results_sites <- read.csv("./rollout_results_sites_4_1_21.csv")
results_length <- read.csv("./rollout_results_length_4_15_21.csv")
interaction_data <- read.csv("./Cutfree_interaction_data.csv")
#results_sites <- results_sites[order(results_sites$n_sites), ]
#resutls_sites <- results_sites[results_sites$n_sites<=10]
#results_sites <- results_sites[1:80,]
plot_cutfree_data <- function() {
font_size=8
font="Arial"
line_size=.4
point_size=0.6
red="#d73027"
blue="#4575b4"
results_sites <- read.csv("./rollout_results_sites_4_1_21.csv")
results_length <- read.csv("./rollout_results_length_4_15_21.csv")
interaction_data <- read.csv("./Cutfree_interaction_data.csv")
plot1 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(0.01,0.1,1,10,100),labels=c("0.01","0.1","1","10","100")) +
ggplot2::geom_point(aes(x=n_sites,y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_runtime),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Runtime (s)") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot2 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(1e9,1e10,1e11),labels=c(expression(paste("10"^"9")),expression(paste("10"^"10")),expression(paste("10"^"11")))) +
ggplot2::geom_point(aes(x=n_sites,y=degeneracy),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_objval),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Possible Sequences") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=degeneracy),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_objval),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot0 <- ggplot2::ggplot(data=results_length) +
ggplot2::scale_y_log10(breaks=c(0.1,1,10,100),labels=c("0.1","1","10","100")) +
ggplot2::geom_point(aes(x=oligo_lengths, y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=oligo_lengths, y=random_runtime),color=red,size=point_size) +
ggplot2::xlab("Randomer Length (bp)") +
ggplot2::ylab("Runtime (s)") +
ggplot2::geom_smooth(aes(x=oligo_lengths,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=oligo_lengths,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
#results %>%
#dplyr::group_by(n_sites) %>%
#dplyr::select(n_sites, time, degeneracy) %>%
#dplyr::summarise_all(dplyr::funs(mean, sd))
cowplot::plot_grid(plot1, plot0,plot2,NULL,rel_widths = c(1,1,1,1), align= "h", nrow=2 )
scaling_factor=2.5
ggsave("Figure1.eps",width=scaling_factor,height=scaling_factor,dpi=300,units="in")
}
plot_cutfree_data()
setwd("~/Documents/GitHub/OligoRL/CutFreeRL/Plotting")
library(ggplot2)
library(dplyr)
results_sites <- read.csv("./rollout_results_sites_4_1_21.csv")
results_length <- read.csv("./rollout_results_length_4_15_21.csv")
interaction_data <- read.csv("./Cutfree_interaction_data.csv")
#results_sites <- results_sites[order(results_sites$n_sites), ]
#resutls_sites <- results_sites[results_sites$n_sites<=10]
#results_sites <- results_sites[1:80,]
plot_cutfree_data <- function() {
font_size=8
font="Arial"
line_size=.4
point_size=0.6
red="#d73027"
blue="#4575b4"
results_sites <- read.csv("./rollout_results_sites_4_1_21.csv")
results_length <- read.csv("./rollout_results_length_4_15_21.csv")
interaction_data <- read.csv("./Cutfree_interaction_data.csv")
plot1 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(0.01,0.1,1,10,100),labels=c("0.01","0.1","1","10","100")) +
ggplot2::geom_point(aes(x=n_sites,y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_runtime),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Runtime (s)") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot2 <- ggplot2::ggplot(data=results_sites) +
ggplot2::scale_y_log10(breaks=c(1e9,1e10,1e11),labels=c(expression(paste("10"^"9")),expression(paste("10"^"10")),expression(paste("10"^"11")))) +
ggplot2::geom_point(aes(x=n_sites,y=degeneracy),color="black",size=point_size) +
ggplot2::geom_point(aes(x=n_sites,y=random_objval),color=red,size=point_size)+
ggplot2::xlab("Restriction Sites") +
ggplot2::ylab("Possible Sequences") +
ggplot2::labs(color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=degeneracy),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=n_sites,y=random_objval),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
plot0 <- ggplot2::ggplot(data=results_length) +
ggplot2::scale_y_log10(breaks=c(0.1,1,10,100),labels=c("0.1","1","10","100")) +
ggplot2::geom_point(aes(x=oligo_lengths, y=time),color="black",size=point_size) +
ggplot2::geom_point(aes(x=oligo_lengths, y=random_runtime),color=red,size=point_size) +
ggplot2::xlab("Randomer Length (bp)") +
ggplot2::ylab("Runtime (s)") +
ggplot2::geom_smooth(aes(x=oligo_lengths,y=time),method="lm", se=FALSE,color="black")+
ggplot2::geom_smooth(aes(x=oligo_lengths,y=random_runtime),method="lm", se=FALSE,color=red)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size = line_size)
#results %>%
#dplyr::group_by(n_sites) %>%
#dplyr::select(n_sites, time, degeneracy) %>%
#dplyr::summarise_all(dplyr::funs(mean, sd))
cowplot::plot_grid(plot1, plot0,plot2,NULL,rel_widths = c(1,1,1,1), align= "h", nrow=2 )
scaling_factor=3
ggsave("Figure1.eps",width=scaling_factor,height=scaling_factor,dpi=300,units="in")
}
plot_cutfree_data()
setwd("~/Documents/GitHub/OligoRL/Oligo_Compressor/Plotting")
library(ggplot2)
library(readxl)
library(dplyr)
plotoligocompressor <-  function() {
font_size=8
font="Arial"
line_size=.4
point_size=0.6
red="#d73027"
blue="#4575b4"
poolsizedata <- read.csv('oligo_compressor_benchmark_5_11_21.csv')
poolsizedata$timeMin=poolsizedata$time/60
recompdata <- read.csv('recompression_experiment_4-23-21_nsims100.csv')
lengthsdata <- read.csv('oligo_compressor_benchmark_lengths_5_12_21.csv')
recompdata <- recompdata[order(recompdata$decompressedsize), ]
recompdata$order <- c(1:nrow(recompdata))
recompdata <- recompdata[1:(nrow(recompdata)-7), ]
recompdata$efficiency <- (recompdata$decompressedsize-recompdata$recompressedsize)/(recompdata$decompressedsize-recompdata$poolsize)
meaneff <- mean(recompdata$efficiency)
plot1 <- ggplot(poolsizedata)+
ggplot2::geom_point(aes(x=poolsize,y=compressedsize),color=red,size=point_size) +
ggplot2::geom_point(aes(x=poolsize,y=poolsize),color=blue,size=point_size)+
ggplot2::xlab("Original Pool Size") +
ggplot2::ylab("Pool Size") +
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size=line_size)
plot2 <- ggplot(recompdata)+
ggplot2::geom_point(aes(x=order,y=recompressedsize),color=red,size=point_size)+
ggplot2::geom_point(aes(x=order,y=poolsize), color="black",size=point_size)+
ggplot2::geom_point(aes(x=order,y=decompressedsize),color=blue,size=point_size)+
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size=line_size)+
ggplot2::xlab("Run Number") +
ggplot2::ylab("Pool Size")
plot3 <-  ggplot(poolsizedata)+
ggplot2::geom_point(aes(x=poolsize,y=timeMin),color=red,size=point_size)+
ggplot2::xlab("Original Pool Size") +
ggplot2::ylab("Run Time (s)") +
ggplot2::theme_classic(base_size=font_size,base_family = font,base_line_size=line_size)
#plot4 <- ggplot(lengthsdata)+
#ggplot2::geom_point(aes(x=oligo_length,y=time),color="red")+
#ggplot2::xlab("Oligo Length")+
#ggplot2::ylab("Runtime [s]")+
#ggplot2::theme_classic()
print("Mean Efficiency")
meaneff
cowplot::plot_grid(plot1,plot3,plot2,NULL,rel_widths = c(1,1,1,1),nrow=2,align="vh")
ggsave("Oligo_Compressor_Figure_Plots.eps",width=3,height=3,dpi=300,units="in")
}
plotoligocompressor()
